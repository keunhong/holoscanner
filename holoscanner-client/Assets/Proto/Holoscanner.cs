// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holoscanner.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Holoscanner.Proto {

  /// <summary>Holder for reflection information generated from holoscanner.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class HoloscannerReflection {

    #region Descriptor
    /// <summary>File descriptor for holoscanner.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HoloscannerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFob2xvc2Nhbm5lci5wcm90bxIRSG9sb3NjYW5uZXIuUHJvdG8iKAoFVmVj",
            "M0QSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiMwoFVmVjNEQS",
            "CQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAISCQoBdxgEIAEoAiJO",
            "CgZDbGllbnQSEQoJZGV2aWNlX2lkGAEgASgJEg0KBXNjb3JlGAogASgNEhAK",
            "CGlzX3JlYWR5GBQgASgIEhAKCG5pY2tuYW1lGB4gASgJImgKDkNsaWVudFBv",
            "c2l0aW9uEioKCHBvc2l0aW9uGGQgASgLMhguSG9sb3NjYW5uZXIuUHJvdG8u",
            "VmVjM0QSKgoIcm90YXRpb24YZSABKAsyGC5Ib2xvc2Nhbm5lci5Qcm90by5W",
            "ZWM0RCLuAQoETWVzaBIPCgdtZXNoX2lkGAIgASgNEhEKCXRpbWVzdGFtcBgD",
            "IAEoBBIPCgdpc19sYXN0GAQgASgIEhAKCGlzX2ZpcnN0GAUgASgIEi4KDGNh",
            "bV9wb3NpdGlvbhhkIAEoCzIYLkhvbG9zY2FubmVyLlByb3RvLlZlYzNEEi4K",
            "DGNhbV9yb3RhdGlvbhhlIAEoCzIYLkhvbG9zY2FubmVyLlByb3RvLlZlYzRE",
            "EisKCHZlcnRpY2VzGMgBIAMoCzIYLkhvbG9zY2FubmVyLlByb3RvLlZlYzNE",
            "EhIKCXRyaWFuZ2xlcxjJASADKAUiRwoGVGFyZ2V0EhEKCXRhcmdldF9pZBgB",
            "IAEoDRIqCghwb3NpdGlvbhgCIAEoCzIYLkhvbG9zY2FubmVyLlByb3RvLlZl",
            "YzNEIocBCglHYW1lU3RhdGUSDwoHZmxvb3JfeRgBIAEoAhIRCgljZWlsaW5n",
            "X3kYAiABKAISKgoHdGFyZ2V0cxgKIAMoCzIZLkhvbG9zY2FubmVyLlByb3Rv",
            "LlRhcmdldBIqCgdjbGllbnRzGBQgAygLMhkuSG9sb3NjYW5uZXIuUHJvdG8u",
            "Q2xpZW50Iu4DCgdNZXNzYWdlEi0KBHR5cGUYASABKA4yHy5Ib2xvc2Nhbm5l",
            "ci5Qcm90by5NZXNzYWdlLlR5cGUSEQoJZGV2aWNlX2lkGAIgASgJEiUKBG1l",
            "c2gYZCABKAsyFy5Ib2xvc2Nhbm5lci5Qcm90by5NZXNoEjoKD2NsaWVudF9w",
            "b3NpdGlvbhhlIAEoCzIhLkhvbG9zY2FubmVyLlByb3RvLkNsaWVudFBvc2l0",
            "aW9uEjEKCmdhbWVfc3RhdGUY9AMgASgLMhwuSG9sb3NjYW5uZXIuUHJvdG8u",
            "R2FtZVN0YXRlEhIKCXRhcmdldF9pZBjYBCABKA0i9gEKBFR5cGUSBwoDQUNL",
            "EAASBwoDRklOEAESCAoETUVTSBAKEg4KCkdBTUVfU1RBVEUQDRIWChJHQU1F",
            "X1NUQVRFX1JFUVVFU1QQDhIQCgxUQVJHRVRfRk9VTkQQFBIOCgpTVEFSVF9H",
            "QU1FEBUSDAoIRU5EX0dBTUUQFhITCg9DTElFTlRfUE9TSVRJT04QKBIQCgxD",
            "TElFTlRfUkVBRFkQKRIXChNDTElFTlRfU0VUX05JQ0tOQU1FECoSEAoMQ0xF",
            "QVJfTUVTSEVTEGQSFAoQQ0xFQVJfR0FNRV9TVEFURRBlEhIKDlVQREFURV9U",
            "QVJHRVRTEGZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.Vec3D), global::Holoscanner.Proto.Vec3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.Vec4D), global::Holoscanner.Proto.Vec4D.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.Client), global::Holoscanner.Proto.Client.Parser, new[]{ "DeviceId", "Score", "IsReady", "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.ClientPosition), global::Holoscanner.Proto.ClientPosition.Parser, new[]{ "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.Mesh), global::Holoscanner.Proto.Mesh.Parser, new[]{ "MeshId", "Timestamp", "IsLast", "IsFirst", "CamPosition", "CamRotation", "Vertices", "Triangles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.Target), global::Holoscanner.Proto.Target.Parser, new[]{ "TargetId", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.GameState), global::Holoscanner.Proto.GameState.Parser, new[]{ "FloorY", "CeilingY", "Targets", "Clients" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Holoscanner.Proto.Message), global::Holoscanner.Proto.Message.Parser, new[]{ "Type", "DeviceId", "Mesh", "ClientPosition", "GameState", "TargetId" }, null, new[]{ typeof(global::Holoscanner.Proto.Message.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vec3D : pb::IMessage<Vec3D> {
    private static readonly pb::MessageParser<Vec3D> _parser = new pb::MessageParser<Vec3D>(() => new Vec3D());
    public static pb::MessageParser<Vec3D> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Vec3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Vec3D(Vec3D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    public Vec3D Clone() {
      return new Vec3D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Vec3D);
    }

    public bool Equals(Vec3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Vec3D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vec4D : pb::IMessage<Vec4D> {
    private static readonly pb::MessageParser<Vec4D> _parser = new pb::MessageParser<Vec4D>(() => new Vec4D());
    public static pb::MessageParser<Vec4D> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Vec4D() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Vec4D(Vec4D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    public Vec4D Clone() {
      return new Vec4D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Vec4D);
    }

    public bool Equals(Vec4D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Vec4D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Client : pb::IMessage<Client> {
    private static readonly pb::MessageParser<Client> _parser = new pb::MessageParser<Client>(() => new Client());
    public static pb::MessageParser<Client> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Client() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Client(Client other) : this() {
      deviceId_ = other.deviceId_;
      score_ = other.score_;
      isReady_ = other.isReady_;
      nickname_ = other.nickname_;
    }

    public Client Clone() {
      return new Client(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 10;
    private uint score_;
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "is_ready" field.</summary>
    public const int IsReadyFieldNumber = 20;
    private bool isReady_;
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 30;
    private string nickname_ = "";
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Client);
    }

    public bool Equals(Client other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (Score != other.Score) return false;
      if (IsReady != other.IsReady) return false;
      if (Nickname != other.Nickname) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (Score != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Score);
      }
      if (IsReady != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsReady);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Nickname);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (IsReady != false) {
        size += 2 + 1;
      }
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      return size;
    }

    public void MergeFrom(Client other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 80: {
            Score = input.ReadUInt32();
            break;
          }
          case 160: {
            IsReady = input.ReadBool();
            break;
          }
          case 242: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClientPosition : pb::IMessage<ClientPosition> {
    private static readonly pb::MessageParser<ClientPosition> _parser = new pb::MessageParser<ClientPosition>(() => new ClientPosition());
    public static pb::MessageParser<ClientPosition> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ClientPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ClientPosition(ClientPosition other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    public ClientPosition Clone() {
      return new ClientPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 100;
    private global::Holoscanner.Proto.Vec3D position_;
    public global::Holoscanner.Proto.Vec3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 101;
    private global::Holoscanner.Proto.Vec4D rotation_;
    public global::Holoscanner.Proto.Vec4D Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ClientPosition);
    }

    public bool Equals(ClientPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Rotation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    public void MergeFrom(ClientPosition other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Holoscanner.Proto.Vec3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Holoscanner.Proto.Vec4D();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 802: {
            if (position_ == null) {
              position_ = new global::Holoscanner.Proto.Vec3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 810: {
            if (rotation_ == null) {
              rotation_ = new global::Holoscanner.Proto.Vec4D();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mesh(Mesh other) : this() {
      meshId_ = other.meshId_;
      timestamp_ = other.timestamp_;
      isLast_ = other.isLast_;
      isFirst_ = other.isFirst_;
      CamPosition = other.camPosition_ != null ? other.CamPosition.Clone() : null;
      CamRotation = other.camRotation_ != null ? other.CamRotation.Clone() : null;
      vertices_ = other.vertices_.Clone();
      triangles_ = other.triangles_.Clone();
    }

    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "mesh_id" field.</summary>
    public const int MeshIdFieldNumber = 2;
    private uint meshId_;
    public uint MeshId {
      get { return meshId_; }
      set {
        meshId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private ulong timestamp_;
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_last" field.</summary>
    public const int IsLastFieldNumber = 4;
    private bool isLast_;
    public bool IsLast {
      get { return isLast_; }
      set {
        isLast_ = value;
      }
    }

    /// <summary>Field number for the "is_first" field.</summary>
    public const int IsFirstFieldNumber = 5;
    private bool isFirst_;
    public bool IsFirst {
      get { return isFirst_; }
      set {
        isFirst_ = value;
      }
    }

    /// <summary>Field number for the "cam_position" field.</summary>
    public const int CamPositionFieldNumber = 100;
    private global::Holoscanner.Proto.Vec3D camPosition_;
    /// <summary>
    ///  We need the camera position in case we want to do space carving.
    /// </summary>
    public global::Holoscanner.Proto.Vec3D CamPosition {
      get { return camPosition_; }
      set {
        camPosition_ = value;
      }
    }

    /// <summary>Field number for the "cam_rotation" field.</summary>
    public const int CamRotationFieldNumber = 101;
    private global::Holoscanner.Proto.Vec4D camRotation_;
    public global::Holoscanner.Proto.Vec4D CamRotation {
      get { return camRotation_; }
      set {
        camRotation_ = value;
      }
    }

    /// <summary>Field number for the "vertices" field.</summary>
    public const int VerticesFieldNumber = 200;
    private static readonly pb::FieldCodec<global::Holoscanner.Proto.Vec3D> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(1602, global::Holoscanner.Proto.Vec3D.Parser);
    private readonly pbc::RepeatedField<global::Holoscanner.Proto.Vec3D> vertices_ = new pbc::RepeatedField<global::Holoscanner.Proto.Vec3D>();
    public pbc::RepeatedField<global::Holoscanner.Proto.Vec3D> Vertices {
      get { return vertices_; }
    }

    /// <summary>Field number for the "triangles" field.</summary>
    public const int TrianglesFieldNumber = 201;
    private static readonly pb::FieldCodec<int> _repeated_triangles_codec
        = pb::FieldCodec.ForInt32(1610);
    private readonly pbc::RepeatedField<int> triangles_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Triangles {
      get { return triangles_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeshId != other.MeshId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (IsLast != other.IsLast) return false;
      if (IsFirst != other.IsFirst) return false;
      if (!object.Equals(CamPosition, other.CamPosition)) return false;
      if (!object.Equals(CamRotation, other.CamRotation)) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      if(!triangles_.Equals(other.triangles_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MeshId != 0) hash ^= MeshId.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (IsLast != false) hash ^= IsLast.GetHashCode();
      if (IsFirst != false) hash ^= IsFirst.GetHashCode();
      if (camPosition_ != null) hash ^= CamPosition.GetHashCode();
      if (camRotation_ != null) hash ^= CamRotation.GetHashCode();
      hash ^= vertices_.GetHashCode();
      hash ^= triangles_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MeshId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MeshId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (IsLast != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLast);
      }
      if (IsFirst != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFirst);
      }
      if (camPosition_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(CamPosition);
      }
      if (camRotation_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(CamRotation);
      }
      vertices_.WriteTo(output, _repeated_vertices_codec);
      triangles_.WriteTo(output, _repeated_triangles_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MeshId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeshId);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (IsLast != false) {
        size += 1 + 1;
      }
      if (IsFirst != false) {
        size += 1 + 1;
      }
      if (camPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CamPosition);
      }
      if (camRotation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CamRotation);
      }
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      size += triangles_.CalculateSize(_repeated_triangles_codec);
      return size;
    }

    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      if (other.MeshId != 0) {
        MeshId = other.MeshId;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.IsLast != false) {
        IsLast = other.IsLast;
      }
      if (other.IsFirst != false) {
        IsFirst = other.IsFirst;
      }
      if (other.camPosition_ != null) {
        if (camPosition_ == null) {
          camPosition_ = new global::Holoscanner.Proto.Vec3D();
        }
        CamPosition.MergeFrom(other.CamPosition);
      }
      if (other.camRotation_ != null) {
        if (camRotation_ == null) {
          camRotation_ = new global::Holoscanner.Proto.Vec4D();
        }
        CamRotation.MergeFrom(other.CamRotation);
      }
      vertices_.Add(other.vertices_);
      triangles_.Add(other.triangles_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            MeshId = input.ReadUInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 32: {
            IsLast = input.ReadBool();
            break;
          }
          case 40: {
            IsFirst = input.ReadBool();
            break;
          }
          case 802: {
            if (camPosition_ == null) {
              camPosition_ = new global::Holoscanner.Proto.Vec3D();
            }
            input.ReadMessage(camPosition_);
            break;
          }
          case 810: {
            if (camRotation_ == null) {
              camRotation_ = new global::Holoscanner.Proto.Vec4D();
            }
            input.ReadMessage(camRotation_);
            break;
          }
          case 1602: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
          case 1610:
          case 1608: {
            triangles_.AddEntriesFrom(input, _repeated_triangles_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Target : pb::IMessage<Target> {
    private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
    public static pb::MessageParser<Target> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Target() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Target(Target other) : this() {
      targetId_ = other.targetId_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    public Target Clone() {
      return new Target(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Holoscanner.Proto.Vec3D position_;
    public global::Holoscanner.Proto.Vec3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Target);
    }

    public bool Equals(Target other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    public void MergeFrom(Target other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Holoscanner.Proto.Vec3D();
        }
        Position.MergeFrom(other.Position);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Holoscanner.Proto.Vec3D();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GameState(GameState other) : this() {
      floorY_ = other.floorY_;
      ceilingY_ = other.ceilingY_;
      targets_ = other.targets_.Clone();
      clients_ = other.clients_.Clone();
    }

    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "floor_y" field.</summary>
    public const int FloorYFieldNumber = 1;
    private float floorY_;
    public float FloorY {
      get { return floorY_; }
      set {
        floorY_ = value;
      }
    }

    /// <summary>Field number for the "ceiling_y" field.</summary>
    public const int CeilingYFieldNumber = 2;
    private float ceilingY_;
    public float CeilingY {
      get { return ceilingY_; }
      set {
        ceilingY_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Holoscanner.Proto.Target> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(82, global::Holoscanner.Proto.Target.Parser);
    private readonly pbc::RepeatedField<global::Holoscanner.Proto.Target> targets_ = new pbc::RepeatedField<global::Holoscanner.Proto.Target>();
    public pbc::RepeatedField<global::Holoscanner.Proto.Target> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "clients" field.</summary>
    public const int ClientsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Holoscanner.Proto.Client> _repeated_clients_codec
        = pb::FieldCodec.ForMessage(162, global::Holoscanner.Proto.Client.Parser);
    private readonly pbc::RepeatedField<global::Holoscanner.Proto.Client> clients_ = new pbc::RepeatedField<global::Holoscanner.Proto.Client>();
    public pbc::RepeatedField<global::Holoscanner.Proto.Client> Clients {
      get { return clients_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FloorY != other.FloorY) return false;
      if (CeilingY != other.CeilingY) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if(!clients_.Equals(other.clients_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FloorY != 0F) hash ^= FloorY.GetHashCode();
      if (CeilingY != 0F) hash ^= CeilingY.GetHashCode();
      hash ^= targets_.GetHashCode();
      hash ^= clients_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FloorY != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FloorY);
      }
      if (CeilingY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CeilingY);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      clients_.WriteTo(output, _repeated_clients_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (FloorY != 0F) {
        size += 1 + 4;
      }
      if (CeilingY != 0F) {
        size += 1 + 4;
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      size += clients_.CalculateSize(_repeated_clients_codec);
      return size;
    }

    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.FloorY != 0F) {
        FloorY = other.FloorY;
      }
      if (other.CeilingY != 0F) {
        CeilingY = other.CeilingY;
      }
      targets_.Add(other.targets_);
      clients_.Add(other.clients_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            FloorY = input.ReadFloat();
            break;
          }
          case 21: {
            CeilingY = input.ReadFloat();
            break;
          }
          case 82: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 162: {
            clients_.AddEntriesFrom(input, _repeated_clients_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Holoscanner.Proto.HoloscannerReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Message(Message other) : this() {
      type_ = other.type_;
      deviceId_ = other.deviceId_;
      Mesh = other.mesh_ != null ? other.Mesh.Clone() : null;
      ClientPosition = other.clientPosition_ != null ? other.ClientPosition.Clone() : null;
      GameState = other.gameState_ != null ? other.GameState.Clone() : null;
      targetId_ = other.targetId_;
    }

    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Holoscanner.Proto.Message.Types.Type type_ = 0;
    /// <summary>
    ///  These should always be set.
    /// </summary>
    public global::Holoscanner.Proto.Message.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 100;
    private global::Holoscanner.Proto.Mesh mesh_;
    /// <summary>
    ///  One or less of the following will be filled in.
    /// </summary>
    public global::Holoscanner.Proto.Mesh Mesh {
      get { return mesh_; }
      set {
        mesh_ = value;
      }
    }

    /// <summary>Field number for the "client_position" field.</summary>
    public const int ClientPositionFieldNumber = 101;
    private global::Holoscanner.Proto.ClientPosition clientPosition_;
    public global::Holoscanner.Proto.ClientPosition ClientPosition {
      get { return clientPosition_; }
      set {
        clientPosition_ = value;
      }
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 500;
    private global::Holoscanner.Proto.GameState gameState_;
    public global::Holoscanner.Proto.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 600;
    private uint targetId_;
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (DeviceId != other.DeviceId) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if (!object.Equals(ClientPosition, other.ClientPosition)) return false;
      if (!object.Equals(GameState, other.GameState)) return false;
      if (TargetId != other.TargetId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (mesh_ != null) hash ^= Mesh.GetHashCode();
      if (clientPosition_ != null) hash ^= ClientPosition.GetHashCode();
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (mesh_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Mesh);
      }
      if (clientPosition_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(ClientPosition);
      }
      if (gameState_ != null) {
        output.WriteRawTag(162, 31);
        output.WriteMessage(GameState);
      }
      if (TargetId != 0) {
        output.WriteRawTag(192, 37);
        output.WriteUInt32(TargetId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (mesh_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      if (clientPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientPosition);
      }
      if (gameState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (TargetId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      return size;
    }

    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.mesh_ != null) {
        if (mesh_ == null) {
          mesh_ = new global::Holoscanner.Proto.Mesh();
        }
        Mesh.MergeFrom(other.Mesh);
      }
      if (other.clientPosition_ != null) {
        if (clientPosition_ == null) {
          clientPosition_ = new global::Holoscanner.Proto.ClientPosition();
        }
        ClientPosition.MergeFrom(other.ClientPosition);
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          gameState_ = new global::Holoscanner.Proto.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Holoscanner.Proto.Message.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 802: {
            if (mesh_ == null) {
              mesh_ = new global::Holoscanner.Proto.Mesh();
            }
            input.ReadMessage(mesh_);
            break;
          }
          case 810: {
            if (clientPosition_ == null) {
              clientPosition_ = new global::Holoscanner.Proto.ClientPosition();
            }
            input.ReadMessage(clientPosition_);
            break;
          }
          case 4002: {
            if (gameState_ == null) {
              gameState_ = new global::Holoscanner.Proto.GameState();
            }
            input.ReadMessage(gameState_);
            break;
          }
          case 4800: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Message message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("ACK")] Ack = 0,
        [pbr::OriginalName("FIN")] Fin = 1,
        [pbr::OriginalName("MESH")] Mesh = 10,
        /// <summary>
        ///  Game state messages.
        /// </summary>
        [pbr::OriginalName("GAME_STATE")] GameState = 13,
        [pbr::OriginalName("GAME_STATE_REQUEST")] GameStateRequest = 14,
        [pbr::OriginalName("TARGET_FOUND")] TargetFound = 20,
        [pbr::OriginalName("START_GAME")] StartGame = 21,
        [pbr::OriginalName("END_GAME")] EndGame = 22,
        [pbr::OriginalName("CLIENT_POSITION")] ClientPosition = 40,
        [pbr::OriginalName("CLIENT_READY")] ClientReady = 41,
        [pbr::OriginalName("CLIENT_SET_NICKNAME")] ClientSetNickname = 42,
        /// <summary>
        ///  Control messages from/to dashabord.
        /// </summary>
        [pbr::OriginalName("CLEAR_MESHES")] ClearMeshes = 100,
        [pbr::OriginalName("CLEAR_GAME_STATE")] ClearGameState = 101,
        [pbr::OriginalName("UPDATE_TARGETS")] UpdateTargets = 102,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
